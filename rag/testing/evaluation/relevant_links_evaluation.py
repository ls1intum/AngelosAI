import re

class RelevantLinkEvaluation:
    def __init__(self):
        """
        Initialize the RelevantLinkEvaluation class.
        """
        pass

    def clean_link(self, link):
        """
        Clean a link by removing 'https://', 'http://', and 'www.'.
        This will normalize the link for better comparison.

        :param link: The link to clean.
        :return: The cleaned version of the link.
        """
        link = re.sub(r"https?://(www\.)?", "", link)  # Remove 'http(s)://' and 'www.'
        return link.strip().lower()  # Convert to lowercase and remove any surrounding spaces

    def evaluate_relevant_links(self, expected_links, generated_answer):
        """
        Evaluate how many of the relevant links are present in the generated answer.
        
        :param expected_links: List of expected relevant links (from QAData).
        :param generated_answer: The answer generated by the LLM.
        :return: The percentage of relevant links that are present in the generated answer.
        """
        if not expected_links:
            return 0.0  # If there are no expected links, return 0.0

        # Clean the expected links
        cleaned_links = [self.clean_link(link) for link in expected_links]

        # Clean the generated answer to compare against the cleaned links
        cleaned_answer = generated_answer.lower()

        # Count how many cleaned links are found in the cleaned answer
        matched_links = [link for link in cleaned_links if link in cleaned_answer]

        # Calculate the percentage of relevant links found in the answer
        percentage_matched = (len(matched_links) / len(cleaned_links)) * 100

        return percentage_matched