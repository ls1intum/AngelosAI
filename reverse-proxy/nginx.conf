http {
    ## --- Lua Shared Dictionary and Rate Limit Zones ---
    # Shared dict for the global daily quota (1000 requests/day)
    lua_shared_dict global_api 10m;

    # Per-user mail limit zone: 3 requests per day (3/86400 r/s)
    limit_req_zone $http_x_sender_email zone=mail:10m rate=0.000035r/s;

    # Per-user chat limit zone: 15 requests per day (15/86400 r/s)
    limit_req_zone $binary_remote_addr zone=chat:10m rate=0.000174r/s;

    server {
        listen 80;
        listen [::]:80;
        server_name chatbot.ase.cit.tum.de www.chatbot.ase.cit.tum.de;

        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl;
        listen [::]:443 ssl;
        http2 on;
        server_name chatbot.ase.cit.tum.de www.chatbot.ase.cit.tum.de;

        # SSL Certificate files
        ssl_certificate /etc/ssl/certs/host:f:asevm83.cit.tum.de.cert.pem;
        ssl_certificate_key /etc/ssl/certs/host:f:asevm83.cit.tum.de.privkey.pem;

        # SSL Settings (recommended for security)
        # ssl_dhparam /etc/nginx/dhparam.pem;
        ssl_prefer_server_ciphers   on;
        ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
        ssl_ecdh_curve secp384r1;
        ssl_session_timeout  10m;
        ssl_session_cache shared:SSL:10m;
        ssl_session_tickets off;
        ssl_stapling on;
        ssl_stapling_verify on;
    #   ssl_early_data on;

        # Timeout settings
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
        send_timeout 300s;

        location /knowledge-manager/ {
            proxy_pass http://knowledge-manager:80/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        location /chat/ {
            proxy_pass http://chatbot:80/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        location /chat-heilbronn/ {
            proxy_pass http://chatbot-org5:80/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        location = /api/mail/ask {
            # Enforce per-user mail limit (3 per day) based on the X-Sender-Email header.
            limit_req zone=mail burst=3 nodelay;

            # Enforce global daily limit (1000 requests) using Lua.
            access_by_lua_block {
                local limit = require "resty.limit.req"
                local lim, err = limit.new("global_api", 1000/86400, 1000)
                if not lim then
                    ngx.log(ngx.ERR, "failed to instantiate global limiter: ", err)
                    return ngx.exit(500)
                end

                local key = "global"  -- All requests share the same key.
                local delay, err = lim:incoming(key, true)
                if not delay then
                    if err == "rejected" then
                        return ngx.exit(429)
                    end
                    ngx.log(ngx.ERR, "global rate limiting error: ", err)
                    return ngx.exit(500)
                end
                if delay >= 0.001 then
                    ngx.sleep(delay)
                end
            }

            proxy_pass http://angelos-server:9007;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Internal-Access "true";
            proxy_set_header Origin $http_origin;
        }

        location = /api/chat/send {
            # Enforce per-user chat limit (15 per day) based on client IP.
            limit_req zone=chat burst=15 nodelay;

            # Enforce global daily limit (1000 requests) using Lua.
            access_by_lua_block {
                local limit = require "resty.limit.req"
                local lim, err = limit.new("global_api", 3/86400, 3)
                if not lim then
                    ngx.log(ngx.ERR, "failed to instantiate global limiter: ", err)
                    return ngx.exit(500)
                end

                local key = "global"
                local delay, err = lim:incoming(key, true)
                if not delay then
                    if err == "rejected" then
                        return ngx.exit(429)
                    end
                    ngx.log(ngx.ERR, "global rate limiting error: ", err)
                    return ngx.exit(500)
                end
                if delay >= 0.001 then
                    ngx.sleep(delay)
                end
            }

            proxy_pass http://angelos-server:9007;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Internal-Access "true";
            proxy_set_header Origin $http_origin;
        }

        location /api/ {
            proxy_pass http://angelos-server:9007;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Internal-Access "true";
            proxy_set_header Origin $http_origin;
        }
    }
}