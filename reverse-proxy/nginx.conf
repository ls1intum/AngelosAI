## --- Lua Shared Dictionary and Rate Limit Zones ---
# Shared dict for the global daily quota (1000 requests/day)
lua_shared_dict global_api 10m;

# Per-user mail limit: 3 requests per day
lua_shared_dict mail_limit 10m;

# Per-user chat limit: 15 requests per day
lua_shared_dict chat_limit 10m;

server {
    listen 80;
    listen [::]:80;
    server_name chatbot.ase.cit.tum.de www.chatbot.ase.cit.tum.de;

    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;
    server_name chatbot.ase.cit.tum.de www.chatbot.ase.cit.tum.de;

    # SSL Certificate files
    ssl_certificate /etc/ssl/certs/host:f:asevm83.cit.tum.de.cert.pem;
    ssl_certificate_key /etc/ssl/certs/host:f:asevm83.cit.tum.de.privkey.pem;

    # SSL Settings (recommended for security)
    # ssl_dhparam /etc/nginx/dhparam.pem;
    ssl_prefer_server_ciphers   on;
    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
    ssl_ecdh_curve secp384r1;
    ssl_session_timeout  10m;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
#   ssl_early_data on;

    # Timeout settings
    proxy_send_timeout 300s;
    proxy_read_timeout 300s;
    send_timeout 300s;

    location /knowledge-manager/ {
        proxy_pass http://knowledge-manager:80/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }

    location /chat/ {
        proxy_pass http://chatbot:80/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;

        proxy_intercept_errors on;
        error_page 404 = /chat/index.html;
    }

    location /chat-heilbronn/ {
        proxy_pass http://chatbot-org3:80/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }

    location = / {
        return 301 /chat/;
    }

    location = /api/mail/ask {
        access_by_lua_block {
            local dict = ngx.shared.mail_limit
            local key = ngx.var.http_x_sender_email
            if not key or key == "" then
                ngx.log(ngx.ERR, "Missing X-Sender-Email header")
                return ngx.exit(400)
            end

            local count = dict:get(key) or 0
            if count >= 3 then
                ngx.log(ngx.ERR, "Per-user mail limit exceeded for: " .. key)
                return ngx.exit(429)
            end

            local new_count, err = dict:incr(key, 1)
            if not new_count then
                dict:set(key, 1, 86400)
            end

            local limit = require "resty.limit.req"
            local lim, err = limit.new("global_api", 1000/86400, 1000)
            if not lim then
                ngx.log(ngx.ERR, "failed to instantiate global limiter: ", err)
                return ngx.exit(500)
            end

            local global_key = "global"
            local delay, err = lim:incoming(global_key, true)
            if not delay then
                if err == "rejected" then
                    ngx.log(ngx.ERR, "Global daily limit exceeded")
                    return ngx.exit(429)
                end
                ngx.log(ngx.ERR, "Global rate limiting error: ", err)
                return ngx.exit(500)
            end

            if delay >= 0.001 then
                ngx.sleep(delay)
            end
        }

        proxy_pass http://angelos-server:9007;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Internal-Access "true";
        proxy_set_header Origin $http_origin;
    }

    location = /api/chat/send {
        access_by_lua_block {
            local dict = ngx.shared.chat_limit
            local key = ngx.var.binary_remote_addr
            if not key or key == "" then
                ngx.log(ngx.ERR, "Missing client IP")
                return ngx.exit(400)
            end

            local count = dict:get(key) or 0
            if count >= 150 then
                ngx.log(ngx.ERR, "Per-user chat limit exceeded for IP: " .. key)
                return ngx.exit(429)
            end

            local new_count, err = dict:incr(key, 1)
            if not new_count then
                dict:set(key, 1, 86400)
            end

            local global_dict = ngx.shared.global_api
            local global_key = "global"
            local global_count = global_dict:get(global_key) or 0
            if global_count >= 1000 then
                ngx.log(ngx.ERR, "Global limit exceeded")
                return ngx.exit(429)
            end

            local new_gcount, err = global_dict:incr(global_key, 1)
            if not new_gcount then
                global_dict:set(global_key, 1, 86400)
            end
        }

        proxy_pass http://angelos-server:9007;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Internal-Access "true";
        proxy_set_header Origin $http_origin;
    }

    location /api/ {
        proxy_pass http://angelos-server:9007;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Internal-Access "true";
        proxy_set_header Origin $http_origin;
    }
}
